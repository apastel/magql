from functools import singledispatch
from graphql import build_schema, GraphQLSchema, GraphQLField, GraphQLString, GraphQLInt, GraphQLNonNull
from sqlalchemy.types import VARCHAR, Integer, String
from magql.filter import StringFilter, IntFilter


@singledispatch
def get_type(type):
    """
    Returns the corrsponding GraphQL type to the given SQLA column type
    :param type: The type of the SQLA column
    :return: The corresponding GraphQL type
    """
    print("Type not found error")


@get_type.register(String)
@get_type.register(VARCHAR)
def _(type):
    return GraphQLString


@get_type.register(Integer)
def _(type):
    return GraphQLInt


def is_required(column):
    """
    Checks whether a scalar SQLAlchemy column is required or not
    :param column: SQLAlchemy column
    :return: Whether or not the column is required
    """
    return not column.nullable and not column.default and not column.primary_key


def get_required_type(column):
    """
    Returns the type of a column and whether or not it is required
    :param column:
    :return: The type of the column conditionally wrapped with
    GraphQLRequired
    """
    type = get_type(column.type)
    return GraphQLNonNull(type) if is_required(column) else type


@singledispatch
def get_filter_type(type):
    """
    Returns the filter based on the given type
    :param type: The type of the SQLAlchemy column
    :return:  The Autogenerated GraphQL filter object
    """
    print("Filter not found error")


@get_filter_type.register(String)
@get_filter_type.register(VARCHAR)
def _(_):
    return StringFilter


@get_filter_type.register(Integer)
def _(_):
    return IntFilter

