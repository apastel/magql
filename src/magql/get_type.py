# from functools import singledispatch
#
# from graphql import GraphQLBoolean
# from graphql import GraphQLEnumType
# from graphql import GraphQLFloat
# from graphql import GraphQLInt
# from graphql import GraphQLNonNull
# from graphql import GraphQLString
# from inflection import camelize
# from sqlalchemy.types import Boolean
# from sqlalchemy.types import Date
# from sqlalchemy.types import DateTime
# from sqlalchemy.types import DECIMAL
# from sqlalchemy.types import FLOAT
# from sqlalchemy.types import Integer
# from sqlalchemy.types import JSON
# from sqlalchemy.types import String
# from sqlalchemy.types import Text
# from sqlalchemy.types import Time
# from sqlalchemy.types import Unicode
# from sqlalchemy.types import UnicodeText
# from sqlalchemy.types import VARCHAR
# from sqlalchemy_utils import ChoiceType
# from sqlalchemy_utils import EmailType
# from sqlalchemy_utils import JSONType
# from sqlalchemy_utils import PhoneNumberType
# from sqlalchemy_utils import URLType
#
# from magql.filter import BooleanFilter
# from magql.filter import EnumFilter
# from magql.filter import FloatFilter
# from magql.filter import IntFilter
# from magql.filter import StringFilter
#
#
# @singledispatch
# def _get_type(type_, column):
#     """
#     Returns the corrsponding GraphQL type to the given SQLA column type
#     :param type: The type of the SQLA column
#     :return: The corresponding GraphQL type
#     """
#     print(f"Type not found error")
#
#
# @_get_type.register(JSON)
# @_get_type.register(JSONType)
# @_get_type.register(DateTime)
# @_get_type.register(Text)
# @_get_type.register(Date)
# @_get_type.register(UnicodeText)
# @_get_type.register(Unicode)
# @_get_type.register(URLType)
# @_get_type.register(PhoneNumberType)
# @_get_type.register(EmailType)
# @_get_type.register(Time)
# @_get_type.register(String)
# @_get_type.register(VARCHAR)
# def _(type, column):
#     return GraphQLString
#
#
# @_get_type.register(Boolean)
# def _(type, column):
#     return GraphQLBoolean
#
#
# @_get_type.register(Integer)
# def _(type, column):
#     return GraphQLInt
#
#
# @_get_type.register(FLOAT)
# @_get_type.register(DECIMAL)
# def _(type, column):
#     return GraphQLFloat
#
#
# @_get_type.register(ChoiceType)
# def _(type, column):
#     name = camelize(column.table.name) + camelize(column.name) + "EnumType"
#     enums = dict((key, value) for key, value in type.choices)
#     rm = GraphQLEnumType(name, enums)
#     return rm
#
#
# def is_required(col):
#     """
#     Checks whether a scalar SQLAlchemy column is required or not
#     :param col: SQLAlchemy column
#     :return: Whether or not the column is required
#     """
#     return not col.nullable and not col.default and not col.primary_key
#
#
# def get_type(column):
#     return _get_type(column.type, column)
#
#
# def get_required_type(column, type):
#     """
#     Returns the type of a column and whether or not it is required
#     :param column:
#     :return: The type of the column conditionally wrapped with
#     GraphQLRequired
#     """
#     return GraphQLNonNull(type) if is_required(column) else type
#
#
# def get_filter_type(column, base_type):
#     return _get_filter_type(column.type, base_type)
#
#
# @singledispatch
# def _get_filter_type(column, base_type):
#     """
#     Returns the filter based on the given type
#     :param type: The type of the SQLAlchemy column
#     :return:  The Autogenerated GraphQL filter object
#     """
#     print("Filter not found error")
#
#
# @_get_filter_type.register(JSON)
# @_get_filter_type.register(JSONType)
# @_get_filter_type.register(DateTime)
# @_get_filter_type.register(Text)
# @_get_filter_type.register(Date)
# @_get_filter_type.register(UnicodeText)
# @_get_filter_type.register(Unicode)
# @_get_filter_type.register(URLType)
# @_get_filter_type.register(PhoneNumberType)
# @_get_filter_type.register(EmailType)
# @_get_filter_type.register(Time)
# @_get_filter_type.register(String)
# @_get_filter_type.register(VARCHAR)
# def _(type, base_type):
#     return StringFilter
#
#
# @_get_filter_type.register(Integer)
# def _(type, base_type):
#     return IntFilter
#
#
# @_get_filter_type.register(FLOAT)
# @_get_filter_type.register(DECIMAL)
# def _(type, base_type):
#     return FloatFilter
#
#
# @_get_filter_type.register(Boolean)
# def _(type, base_type):
#     return BooleanFilter
#
#
# @_get_filter_type.register(ChoiceType)
# def _(type_, base_type):
#     return EnumFilter(base_type)
