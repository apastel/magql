from functools import singledispatch

from inflection import camelize
from sqlalchemy import Boolean
from sqlalchemy import Date
from sqlalchemy import DateTime
from sqlalchemy import DECIMAL
from sqlalchemy import FLOAT
from sqlalchemy import Integer
from sqlalchemy import JSON
from sqlalchemy import String
from sqlalchemy import Text
from sqlalchemy import Time
from sqlalchemy import Unicode
from sqlalchemy import UnicodeText
from sqlalchemy import VARCHAR
from sqlalchemy_utils import ChoiceType
from sqlalchemy_utils import EmailType
from sqlalchemy_utils import JSONType
from sqlalchemy_utils import PhoneNumberType
from sqlalchemy_utils import URLType

from magql.definitions import MagqlBoolean
from magql.definitions import MagqlEnumType
from magql.definitions import MagqlFloat
from magql.definitions import MagqlInt
from magql.definitions import MagqlNonNull
from magql.definitions import MagqlString
from magql.magql_filter import BooleanFilter
from magql.magql_filter import EnumFilter
from magql.magql_filter import FloatFilter
from magql.magql_filter import IntFilter
from magql.magql_filter import StringFilter


@singledispatch
def _get_magql_type(type_, column):
    """
    Returns the corrsponding GraphQL type to the given SQLA column type
    :param type: The type of the SQLA column
    :return: The corresponding GraphQL type
    """


def get_magql_type(col):
    return _get_magql_type(col.type, col)


def is_required(col):
    """
    Checks whether a scalar SQLAlchemy column is required or not
    :param col: SQLAlchemy column
    :return: Whether or not the column is required
    """
    return not col.nullable and not col.default and not col.primary_key


def get_magql_required_type(col):
    type_ = get_magql_type(col)
    if is_required(col):
        return MagqlNonNull(type_)
    else:
        return type_


@_get_magql_type.register(JSON)
@_get_magql_type.register(JSONType)
@_get_magql_type.register(DateTime)
@_get_magql_type.register(Text)
@_get_magql_type.register(Date)
@_get_magql_type.register(UnicodeText)
@_get_magql_type.register(Unicode)
@_get_magql_type.register(URLType)
@_get_magql_type.register(PhoneNumberType)
@_get_magql_type.register(EmailType)
@_get_magql_type.register(Time)
@_get_magql_type.register(String)
@_get_magql_type.register(VARCHAR)
def _(type, column):
    return MagqlString()


@_get_magql_type.register(Boolean)
def _(type, column):
    return MagqlBoolean()


@_get_magql_type.register(Integer)
def _(type, column):
    return MagqlInt(MagqlInt.parse_value_accepts_string)


@_get_magql_type.register(FLOAT)
@_get_magql_type.register(DECIMAL)
def _(type, column):
    return MagqlFloat()


@_get_magql_type.register(ChoiceType)
def _(type_, column):
    # name = camelize(column.table.name) + camelize(column.name) + "EnumType"
    # enums = dict((key, value) for key, value in type.choices)
    # rm = GraphQLEnumType(name, enums)
    # return rm
    name = camelize(column.table.name) + camelize(column.name) + "EnumType"
    enums = dict((key, value) for key, value in type_.choices)
    return MagqlEnumType(name, enums)


def get_magql_filter_type(type_, base_type):
    return _get_magql_filter_type(type_.type, base_type)


@singledispatch
def _get_magql_filter_type(column, base_type):
    """
    Returns the filter based on the given type
    :param type: The type of the SQLAlchemy column
    :return:  The Autogenerated GraphQL filter object
    """
    print("Filter not found error")


@_get_magql_filter_type.register(JSON)
@_get_magql_filter_type.register(JSONType)
@_get_magql_filter_type.register(DateTime)
@_get_magql_filter_type.register(Text)
@_get_magql_filter_type.register(Date)
@_get_magql_filter_type.register(UnicodeText)
@_get_magql_filter_type.register(Unicode)
@_get_magql_filter_type.register(URLType)
@_get_magql_filter_type.register(PhoneNumberType)
@_get_magql_filter_type.register(EmailType)
@_get_magql_filter_type.register(Time)
@_get_magql_filter_type.register(String)
@_get_magql_filter_type.register(VARCHAR)
def _(type, base_type):
    return StringFilter


@_get_magql_filter_type.register(Integer)
def _(type, base_type):
    return IntFilter


@_get_magql_filter_type.register(FLOAT)
@_get_magql_filter_type.register(DECIMAL)
def _(type, base_type):
    return FloatFilter


@_get_magql_filter_type.register(Boolean)
def _(type, base_type):
    return BooleanFilter


@_get_magql_filter_type.register(ChoiceType)
def _(type_, base_type):
    return EnumFilter(base_type)
